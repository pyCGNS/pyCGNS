#  -------------------------------------------------------------------------
#  pyCGNS - Python package for CFD General Notation System
#  See license.txt file in the root directory of this Python module source  
#  -------------------------------------------------------------------------
# This file has been generated on [@DATE@]
# Using platform [@PLATFORM@]

from enum import Enum

__all__ = ["show"]
_built_with_meson = True


class DisplayModes(Enum):
    stdout = "stdout"
    dicts = "dicts"


def _cleanup(d):
    """
    Removes empty values in a `dict` recursively
    This ensures we remove values that Meson could not provide to CONFIG
    """
    if isinstance(d, dict):
        return {k: _cleanup(v) for k, v in d.items() if v and _cleanup(v)}
    else:
        return d


CONFIG = _cleanup(
    {
        "Compilers": {
            "c": {
                "name": "@C_COMP@",
                "linker": r"@C_COMP_LINKER_ID@",
                "version": "@C_COMP_VERSION@",
                "commands": r"@C_COMP_CMD_ARRAY@",
                "args": r"@C_COMP_ARGS@",
                "linker args": r"@C_COMP_LINK_ARGS@",
            },
            "cython": {
                "name": "@CYTHON_COMP@",
                "linker": r"@CYTHON_COMP_LINKER_ID@",
                "version": "@CYTHON_COMP_VERSION@",
                "commands": r"@CYTHON_COMP_CMD_ARRAY@",
                "args": r"@CYTHON_COMP_ARGS@",
                "linker args": r"@CYTHON_COMP_LINK_ARGS@",
            },
        },
        "Machine Information": {
            "host": {
                "cpu": "@HOST_CPU@",
                "family": "@HOST_CPU_FAMILY@",
                "endian": "@HOST_CPU_ENDIAN@",
                "system": "@HOST_CPU_SYSTEM@",
            },
            "build": {
                "cpu": "@BUILD_CPU@",
                "family": "@BUILD_CPU_FAMILY@",
                "endian": "@BUILD_CPU_ENDIAN@",
                "system": "@BUILD_CPU_SYSTEM@",
            },
            "cross-compiled": bool("@CROSS_COMPILED@".lower().replace("false", "")),
        },
        "Build Dependencies": {
            "hdf5": {
                "name": "@HDF5_NAME@",
                "found": bool("@HDF5_FOUND@".lower().replace("false", "")),
                "version": "@HDF5_VERSION@",
                "detection method": "@HDF5_TYPE_NAME@",
                "include directory": r"@HDF5_INCLUDEDIR@",
                "lib directory": r"@HDF5_LIBDIR@",
                "hdf5 configuration": r"@HDF5_CONFIG@",
                "pc file directory": r"@HDF5_PCFILEDIR@",
            },
            "numpy": {
                "name": "@NUMPY_NAME@",
                "found": bool("@NUMPY_FOUND@".lower().replace("false", "")),
                "version": "@NUMPY_VERSION@",
                "detection method": "@NUMPY_TYPE_NAME@",
                "include directory": r"@NUMPY_INCLUDEDIR@",
                "lib directory": r"@NUMPY_LIBDIR@",
                "pc file directory": r"@NUMPY_PCFILEDIR@",
            },
        },
        "Python Information": {
            "path": r"@PYTHON_PATH@",
            "version": "@PYTHON_VERSION@",
        },
    }
)


def _check_pyyaml():
    import yaml

    return yaml


def show(mode=DisplayModes.stdout.value):
    """
    Show libraries and system information on which NumPy was built
    and is being used

    Parameters
    ----------
    mode : {`'stdout'`, `'dicts'`}, optional.
        Indicates how to display the config information.
        `'stdout'` prints to console, `'dicts'` returns a dictionary
        of the configuration.

    Returns
    -------
    out : {`dict`, `None`}
        If mode is `'dicts'`, a dict is returned, else None

    See Also
    --------
    get_include : Returns the directory containing NumPy C
                  header files.

    Notes
    -----
    1. The `'stdout'` mode will give more readable
       output if ``pyyaml`` is installed

    """
    if mode == DisplayModes.stdout.value:
        try:  # Non-standard library, check import
            yaml = _check_pyyaml()

            print(yaml.dump(CONFIG))
        except ModuleNotFoundError:
            import warnings
            import json

            warnings.warn("Install `pyyaml` for better output", stacklevel=1)
            print(json.dumps(CONFIG, indent=2))
    elif mode == DisplayModes.dicts.value:
        return CONFIG
    else:
        raise AttributeError(
            f"Invalid `mode`, use one of: {', '.join([e.value for e in DisplayModes])}"
        )
